@inproceedings{Schleimer2003,
address = {New York, New York, USA},
author = {Schleimer, Saul and Wilkerson, Daniel S. and Aiken, Alex},
booktitle = {Proceedings of the 2003 ACM SIGMOD international conference on on Management of data - SIGMOD '03},
doi = {10.1145/872757.872770},
file = {:home/paulo/Documents/work/bib/files/Schleimer, Wilkerson, Aiken - 2003 - Winnowing.pdf:pdf},
isbn = {158113634X},
pages = {76},
publisher = {ACM Press},
title = {{Winnowing}},
url = {http://portal.acm.org/citation.cfm?doid=872757.872770},
year = {2003}
}
@article{Orenstein2017,
abstract = {With the rapidly increasing volume of deep sequencing data, more efficient algorithms and data structures are needed. Minimizers are a central recent paradigm that has improved various sequence analysis tasks, including hashing for faster read overlap detection, sparse suffix arrays for creating smaller indexes, and Bloom filters for speeding up sequence search. Here, we propose an alternative paradigm that can lead to substantial further improvement in these and other tasks. For integers k and L {\textgreater} k, we say that a set of k-mers is a universal hitting set (UHS) if every possible L-long sequence must contain a k-mer from the set. We develop a heuristic called DOCKS to find a compact UHS, which works in two phases: The first phase is solved optimally, and for the second we propose several efficient heuristics, trading set size for speed and memory. The use of heuristics is motivated by showing the NP-hardness of a closely related problem. We show that DOCKS works well in practice and produces UHSs that are very close to a theoretical lower bound. We present results for various values of k and L and by applying them to real genomes show that UHSs indeed improve over minimizers. In particular, DOCKS uses less than 30{\%} of the 10-mers needed to span the human genome compared to minimizers. The software and computed UHSs are freely available at github.com/Shamir-Lab/DOCKS/ and acgt.cs.tau.ac.il/docks/, respectively.},
author = {Orenstein, Yaron and Pellow, David and Mar{\c{c}}ais, Guillaume and Shamir, Ron and Kingsford, Carl},
doi = {10.1371/journal.pcbi.1005777},
editor = {Raphael, Benjamin J.},
file = {:home/paulo/Documents/work/bib/files/Orenstein et al. - 2017 - Designing small universal k-mer hitting sets for improved analysis of high-throughput sequencing.pdf:pdf},
issn = {1553-7358},
journal = {PLOS Computational Biology},
month = {oct},
number = {10},
pages = {e1005777},
publisher = {Public Library of Science},
title = {{Designing small universal k-mer hitting sets for improved analysis of high-throughput sequencing}},
url = {https://dx.plos.org/10.1371/journal.pcbi.1005777},
volume = {13},
year = {2017}
}
@article{Marcais2017,
author = {Mar{\c{c}}ais, Guillaume and Pellow, David and Bork, Daniel and Orenstein, Yaron and Shamir, Ron and Kingsford, Carl},
doi = {10.1093/bioinformatics/btx235},
file = {:home/paulo/Documents/work/bib/files/Mar{\c{c}}ais et al. - 2017 - Improving the performance of minimizers and winnowing schemes.pdf:pdf},
issn = {1367-4803},
journal = {Bioinformatics},
month = {jul},
number = {14},
pages = {i110--i117},
publisher = {Oxford University Press},
title = {{Improving the performance of minimizers and winnowing schemes}},
url = {https://academic.oup.com/bioinformatics/article/33/14/i110/3953951},
volume = {33},
year = {2017}
}
@article{Roberts2004,
author = {Roberts, M. and Hayes, W. and Hunt, B. R. and Mount, S. M. and Yorke, J. A.},
doi = {10.1093/bioinformatics/bth408},
file = {:home/paulo/Documents/work/bib/files/Roberts et al. - 2004 - Reducing storage requirements for biological sequence comparison.pdf:pdf},
issn = {1367-4803},
journal = {Bioinformatics},
month = {dec},
number = {18},
pages = {3363--3369},
publisher = {Oxford University Press},
title = {{Reducing storage requirements for biological sequence comparison}},
url = {https://academic.oup.com/bioinformatics/article-lookup/doi/10.1093/bioinformatics/bth408},
volume = {20},
year = {2004}
}
@article{Chikhi2015,
abstract = {The de Bruijn graph plays an important role in bioinformatics, especially in the context of de novo assembly. However, the representation of the de Bruijn graph in memory is a computational bottleneck for many assemblers. Recent papers proposed a navigational data structure approach in order to improve memory usage. We prove several theoretical space lower bounds to show the limitation of these types of approaches. We further design and implement a general data structure (DBGFM) and demonstrate its use on a human whole-genome dataset, achieving space usage of 1.5 GB and a 46{\%} improvement over previous approaches. As part of DBGFM, we develop the notion of frequency-based minimizers and show how it can be used to enumerate all maximal simple paths of the de Bruijn graph using only 43 MB of memory. Finally, we demonstrate that our approach can be integrated into an existing assembler by modifying the ABySS software to use DBGFM.},
annote = {NULL},
archivePrefix = {arXiv},
arxivId = {1401.5383},
author = {Chikhi, Rayan and Limasset, Antoine and Jackman, Shaun and Simpson, Jared T and Medvedev, Paul},
doi = {10.1089/cmb.2014.0160},
eprint = {1401.5383},
file = {:home/paulo/Documents/work/bib/files/Chikhi et al. - 2015 - On the Representation of De Bruijn Graphs.pdf:pdf},
isbn = {9783319052687},
issn = {1066-5277},
journal = {Journal of Computational Biology},
month = {may},
number = {5},
pages = {336--352},
pmid = {25629448},
publisher = {Mary Ann Liebert, Inc. 140 Huguenot Street, 3rd Floor New Rochelle, NY 10801 USA},
title = {{On the Representation of De Bruijn Graphs}},
url = {http://online.liebertpub.com/doi/10.1089/cmb.2014.0160},
volume = {22},
year = {2015}
}
